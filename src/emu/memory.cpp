#include "memory.hpp"

chipMemory::chipMemory(/* args */)
{
    loadFontData();
}

chipMemory::~chipMemory()
{
    // leave blank
}

void chipMemory::setAdress(unsigned short adress, unsigned char data) 
{
    ram[adress] = data;
}

unsigned char chipMemory::getAdress(unsigned short adress) 
{
    unsigned char data = ram[adress];
    return data;
}

void chipMemory::loadFontData()
{
    // font is stored in memory between adresses 0x050 and 0x09F
    unsigned char font[] = 
    {
        0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
        0x20, 0x60, 0x20, 0x20, 0x70, // 1
        0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
        0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
        0x90, 0x90, 0xF0, 0x10, 0x10, // 4
        0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
        0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
        0xF0, 0x10, 0x20, 0x40, 0x40, // 7
        0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
        0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
        0xF0, 0x90, 0xF0, 0x90, 0x90, // A
        0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
        0xF0, 0x80, 0x80, 0x80, 0xF0, // C
        0xE0, 0x90, 0x90, 0x90, 0xE0, // D
        0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
        0xF0, 0x80, 0xF0, 0x80, 0x80  // F
    };

    for (unsigned short adressIndex = 0; adressIndex < sizeof(font) / sizeof(unsigned char); adressIndex++)
    {
        setAdress(adressIndex, font[adressIndex]);
    }
    
}
